VERY IMPORTANT NOTE:
On a code-first situation (you are creating the database from Models), this instruction MUST BE RUN BEFORE migrations

DO NOT ADD a DbContext.  This will create the DbContext files and Startup.cs settings

You must run this instruction line for EACH model file in the Models directory.

It will create a controller and DbContext and services.add() for each one.
You will have to change the connection likely.

NOTE: MAKE SURE YOU CHANGE ALL NAMES THAT APPLY
NAMELY: controller name should match -m NAME, Context -dc NAME should match with -m NAME
Use this as a guide, but be sure to change for each run of this instruction.

-m NAME matches Property class name, not .cs file name

Per table/controller design instruction:
dotnet aspnet-codegenerator controller -name UserController -async -api -m User -dc DbContext -outDir Controllers

WHEN DOING DATABASE MIGRATIONS:
Because multiple tables/models will create multiple DbContexts, you will have to run migrations one at a time.
It doesn't appear to matter the order as long as each migration works successfully.
So:
Do first migration (Contexts are listed in Data folder):
dotnet ef migrations add myproject_first --context DbChoosefirstContext

Complete first migration:
dotnet ef database update --context DbChoosefirstContext

Do second migration:
dotnet ef migrations add myproject_second --contextDbNextContext

Complete second migration:
dotnet ef database update --context contextDbNextContext

Rinsh, wash, repeat until all are done. 
DO NOT UNDER ANY CIRCUMSTANCES DELETE ANYTHING FROM MIGRATIONS FOLDER WHILE DOING THIS (or after for that matter)

Caveat-Only works correctly when Project target is net5.0, not net50

controller -argument for the code generator

-name --specifies the name of the controller .cs file (Controller folder must exist, I believe)

-async  --required, I think

-m --name of Model to use in Model folder

-dc --name of DbContext to use in DbContext folder (everything in Startup must be set  
                    .e.g.
                            services.AddControllers();
                            services.AddDbContext<TodoContext>(opt =>
                                               opt.UseInMemoryDatabase("TodoList"));
                                               
                    Or something equivalent)

-outDir --Name of folder to store generated controller




 services.AddCors(options =>
            {
                //Primary Cors Policy
                //Could make others just like this
                options.AddPolicy("ThePolicy",
                builder =>
                {
                    builder.WithOrigins("*",
                                        "*");
                });
            });