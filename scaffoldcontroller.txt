VERY IMPORTANT NOTE:
On a code-first situation (you are creating the database from Models), this instruction MUST BE RUN BEFORE migrations

DO NOT ADD a DbContext.  This will create the DbContext files and Startup.cs settings

You must run this instruction line for EACH model file in the Models directory.

It will create a controller and DbContext and services.add() for each one.
You will have to change the connection likely.


dotnet aspnet-codegenerator controller -name UserController -async -api -m users -dc DbContext -outDir Controllers

Caveat-Only works correctly when Project target is net5.0, not net50

controller -argument for the code generator

-name --specifies the name of the controller .cs file (Controller folder must exist, I believe)

-async  --required, I think

-m --name of Model to use in Model folder

-dc --name of DbContext to use in DbContext folder (everything in Startup must be set  
                    .e.g.
                            services.AddControllers();
                            services.AddDbContext<TodoContext>(opt =>
                                               opt.UseInMemoryDatabase("TodoList"));
                                               
                    Or something equivalent)

-outDir --Name of folder to store generated controller




 services.AddCors(options =>
            {
                //Primary Cors Policy
                //Could make others just like this
                options.AddPolicy("ThePolicy",
                builder =>
                {
                    builder.WithOrigins("*",
                                        "*");
                });
            });